plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
}

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

// Java 17
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

// Ensure the common project is evaluated so we can include its outputs into the mod jar during development runs
evaluationDependsOn(':common')

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

minecraft {
    mappings channel: mapping_channel, version: mapping_version
    copyIdeResources = true
    runs {
        configureEach {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
        client { property 'forge.enabledGameTestNamespaces', mod_id }
        server { property 'forge.enabledGameTestNamespaces', mod_id; args '--nogui' }
        gameTestServer { property 'forge.enabledGameTestNamespaces', mod_id }
        data {
            workingDirectory project.file('run-data')
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

// Add JitPack so we can pull Serene Seasons (dev/test dependency) if available there
repositories {
    maven { url = uri('https://jitpack.io') }
    // Local libs folder fallback for development jars (place SereneSeasons/GlitchCore here if Gradle resolution fails)
    flatDir {
        dirs 'libs'
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    implementation project(':common')
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    // Optional development dependency on SereneSeasons.
    // Preferred: place matched SereneSeasons + GlitchCore jars into 'forge/run/mods/'.
    // Alternative: drop compatible jars into 'forge/libs/' and uncomment the lines below to let Gradle include them in the run classpath.
    // Example coordinates (JitPack) may not be reliable for mapped/deobf artifacts; keep the local fallback.
    // implementation fg.deobf('com.github.Glitchfiend:SereneSeasons:9.1.0.2')
    // implementation fg.deobf('com.github.Glitchfiend:GlitchCore:VERSION')
    // Local JAR fallback: if you placed SereneSeasons into forge/libs/, Gradle can use the flatDir repository.
    // NOTE: ForgeGradle expects mapped/deobf coordinates when adding compile/run dependencies. Local jars
    // declared here often cause resolution failures because FG constructs a mapped artifact name that
    // doesn't exist in flatDir. For quick runtime testing place the SereneSeasons + GlitchCore jars into
    // 'forge/run/mods' instead and DO NOT add them as implementation dependencies. The dev runs pick up
    // jars from run/mods automatically.
    // If you truly need the mod on the compile classpath you must obtain proper mapped/deobf artifacts from
    // a repository that provides them (JitPack/Maven) or publish a mapped version locally.
    // implementation fg.deobf(name: 'SereneSeasons-forge-1.20.1-9.1.0.2', ext: 'jar')
}

tasks.named('processResources', ProcessResources).configure {
    // Define a estratégia de tratamento de duplicados
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }

    // Make the compiled classes/resources from the common project available in
    // the mod resources directory used by the dev run so shared classes like
    // TimeUtils are loadable by the mod classloader.
    from(project(':common').sourceSets.main.output) {
        into ''
    }
}

tasks.named('jar', Jar).configure {
    // Define a estratégia de tratamento de duplicados
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1',
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    // Include compiled classes/resources from the common project so shared utilities are available
    from(project(':common').sourceSets.main.output) {
        into ''
    }

    finalizedBy 'reobfJar'
}

publishing { publications { register('mavenJava', MavenPublication) { artifact jar } } }

tasks.withType(JavaCompile).configureEach { options.encoding = 'UTF-8' }
